@page "/traffic/{LocationSymbol}"
@inject HttpClient Http
@inject IConfiguration Configuration
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json;
@using MerchantExpanse.SpaceTrafficControl.ViewModels;
@using MerchantExpanse.SpaceTraders.Models;

<h1 class="text-center">Space Traffic Control - @LocationSymbol</h1>

@if (Arrivals == null || Departures == null)
{
    <p>
        <em>
            Connecting via ansible...
            @if (Error != null)
            {
                <br />
                @Error
            }
        </em>
    </p>
}
else
{
    <div class="container-fluid">
        <div class="row align-items-start">
            <div class="stat-block col-md-2">
                <table class="table table-dark table-sm table-striped">
                    <caption>Location Data</caption>
                    <tbody>
                        <tr>
                            <th>Symbol</th>
                            <td>@Location.Symbol</td>
                        </tr>
                        <tr>
                            <th>Type</th>
                            <td>@Location.Type</td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <td>@Location.Name</td>
                        </tr>
                        <tr>
                            <td>Position</td>
                            <td>@Location.X, @Location.Y</td>
                        </tr>
                        <tr>
                            <td>Docked Ships</td>
                            <td>@Location.DockedShips</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="stat-block col-md-2">
                <table class="table table-dark table-sm table-striped">
                    <caption>Top Usernames</caption>
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th># of Ships</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var count in TopUsers.Take(TopUsersAmount))
                        {
                            <tr>
                                <td>@count.Username</td>
                                <td>@count.Count</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="stat-block col-md-2">
                <table class="table table-dark table-sm table-striped">
                    <caption>Top Ship Types</caption>
                    <thead>
                        <tr>
                            <th>Ship Type</th>
                            <th># of Ships</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var count in TopShips.Take(TopShipAmount))
                        {
                            <tr>
                                <td>@count.ShipType</td>
                                <td>@count.Count</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <h3>Arrivals (@TopArrivals.Count() Flight Plans)</h3>
                <table class="table table-dark table-striped table-sm">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>From</th>
                            <th>Ship ID</th>
                            <th>Username</th>
                            <th>Ship Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var flightPlan in TopArrivals.Take(FlightPlansAmount))
                        {
                            <tr>
                                <td>@CalculateETA(flightPlan)</td>
                                <td>@flightPlan.Departure</td>
                                <td>@flightPlan.ShipId</td>
                                <td>@flightPlan.Username</td>
                                <td>@flightPlan.ShipType</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <h3>Departures (@TopDepartures.Count() Flight Plans)</h3>
                <table class="table table-dark table-striped table-sm">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>To</th>
                            <th>Ship ID</th>
                            <th>Username</th>
                            <th>Ship Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var flightPlan in TopDepartures.Take(FlightPlansAmount))
                        {
                            <tr>
                                <td>@CalculateETA(flightPlan)</td>
                                <td>@flightPlan.Destination</td>
                                <td>@flightPlan.ShipId</td>
                                <td>@flightPlan.Username</td>
                                <td>@flightPlan.ShipType</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <h3>Structures</h3>
        @if (Location.Structures.Count() == 0)
        {
            <p>No structures at this location.</p>
        }
        else
        {
            <div class="row">
                @foreach (var structure in Location.Structures)
                {
                    <div class="col-md-4">

                        <div class="card bg-dark">
                            <h5 class="card-header">
                                @structure.Name (@structure.Id) @if (structure.Completed)
                                {
                                    <img class="oi oi-check" aria-hidden="true" />
                                }
                                else
                                {<img class="oi oi-x" aria-hidden="true" />}
                            </h5>
                            <div class="card-body">
                                @foreach (var material in structure.Materials)
                                {
                                    <div class="row my-3">
                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    @material.Good
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="progress">
                                                        <div class="progress-bar bg-success" role="progressbar"
                                                             style="width: @($"{Math.Round(((double)material.Quantity / material.TargetQuantity) * 100)}%")"
                                                             aria-valuenow="@material.Quantity"
                                                             aria-valuemin="0"
                                                             aria-valuemax="@material.TargetQuantity">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col">
                                                    @material.Quantity / @material.TargetQuantity
                                                </div>
                                                <div class="col">
                                                    @($"{Math.Round(((double)material.Quantity / material.TargetQuantity) * 100)}%")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string LocationSymbol { get; set; }

    private IEnumerable<PublicFlightPlan> Arrivals;
    private IEnumerable<PublicFlightPlan> Departures;
    private IEnumerable<UserShipCount> TopUsers;
    private IEnumerable<ShipTypeCount> TopShips;
    private LocationDetail Location;
    private string Error;

    private const int TopUsersAmount = 5;
    private const int TopShipAmount = 5;
    private const int ArrivedDisplayDelay = 20;
    private const int FlightPlansAmount = 10;
    private const int FetchDataInterval = 1 * 60 * 1000;

    private IEnumerable<PublicFlightPlan> TopArrivals
    {
        get
        {
            return Arrivals.Where(a => DateTime.UtcNow <= a.ArrivesAt.AddSeconds(ArrivedDisplayDelay));
        }
    }

    private IEnumerable<PublicFlightPlan> TopDepartures
    {
        get
        {
            return Departures.Where(a => DateTime.UtcNow <= a.ArrivesAt.AddSeconds(ArrivedDisplayDelay));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchTrafficData();

        _ = UpdateTimes();
        _ = UpdateTrafficData();
    }

    public string CalculateETA(PublicFlightPlan flightPlan)
    {
        var timeSpan = flightPlan.ArrivesAt - DateTime.UtcNow;
        var eta = Convert.ToInt32(timeSpan.TotalSeconds);

        return eta >= 0 ? eta.ToString() : "ARRIVED";
    }

    private async Task UpdateTimes()
    {
        while (true)
        {
            await Task.Delay(1000);
            StateHasChanged();
        }
    }

    private async Task UpdateTrafficData()
    {
        while (true)
        {
            await Task.Delay(FetchDataInterval);
            await FetchTrafficData();
            StateHasChanged();
        }
    }

    private async Task FetchTrafficData()
    {
        try
        {
            var spaceControl = await Http.GetFromJsonAsync<SpaceTrafficViewModel>($"{Configuration["MerchantExpanse:Api"]}/space-traffic/{LocationSymbol}");
            Location = spaceControl.Location;
            Arrivals = spaceControl.Arrivals;
            Departures = spaceControl.Departures;
            TopShips = spaceControl.TopShips;
            TopUsers = spaceControl.TopUsers;

            Error = null;
        }
        catch
        {
            Error = $"Unable to retrieve data for location {LocationSymbol}";
        }
    }
}